---
title: Operational recommendations for management of DNSSEC Validator
abbrev: DNSSEC Validator operational recommendations
docname: draft-mglt-dnsop-dnssec-validator-requirements-08


area: operational
wg: dnsop
kw: Internet-Draft
cat: info

coding: us-ascii
pi:
  rfcedstyle: yes
  toc: yes
  tocindent: yes
  sortrefs: yes
  symrefs: yes
  strict: yes
  comments: yes
  inline: yes
  docmapping: yes

author:
      -
        ins: D. Migault
        name: Daniel Migault
        org: Ericsson
        street: 8275 Trans Canada Route
        city: Saint Laurent, QC
        code: 4S 0B6
        country: Canada
        email: daniel.migault@ericsson.com
      -
        ins: E. Lewis
        name: Edward Lewis
        org: ICANN
        street: 
        -
        city: 
        -
        code: 
        -
        country:
        -
        email: edward.lewis@icann.org
      -
        ins: D. York
        name: Dan York
        org: ISOC
        street: 
        -
        city: 
        -
        code: 
        -
        country:
        -
        email: york@isoc.org

informative:
  UNBOUND-ANCHOR:
    author: 
    target: https://nlnetlabs.nl/documentation/unbound/unbound-anchor/
    title: unbound-anchor - Unbound anchor utility






--- abstract

The DNS Security Extensions define a process for validating received
data and assert them authentic and complete as opposed to
forged.  

This document is focused on operational recommendations that DNSSEC
validators operators SHOULD put in place in order to implement
sufficient Trust that makes DNSSEC validation output accurate. The
recommendations described in this document include, provisioning
mechanisms as well as monitoring and management mechanisms. 
      
--- middle


# Requirements Notation

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described BCP 14
{{!RFC2119}} {{!RFC8174}} when, and only when, they appear in all
capitals, as shown here.

# Introduction {#sec-intro}

The act of DNSSEC validation {{!RFC4033}}{{!RFC4035}} can be broken into
two part:

* Signature Validation: which consists in checking the cryptographic
signature of a Resource Record Set (RRset). The signature validation
involves among other parameters a DNSKEY Resource Record (RR) and RRSIG
RR and the RRset itself. The signature validation process results in
assertion that the owner of the private part of the public key contained
in the DNSKEY RR has effectively published the RRset. The binding
between the private key and the RRset is provided by the trust that the
private key used to generate the signature is known only to the
authorized party.  (It's more likely that the key is "exposed" or
"guessed" than the algorithm "becomes broken.")



* Trust: Signature Validation results in asserting a RRset is accurately
validated if there is sufficient trust that the owner of the private key
associated to the DNSKEY RR is the owner of the RRset - i.e. that is to
say is the legitimate owner. Such trust is provided by a Trust Anchor
(TA), and the chain of trust established between the TA and the DNSKEY
RR. The chain of trust is obtained by recursively validating the DNSKEY
RRs. As a result, such trust results from the trust placed in the TA as
well as the delegation mechanism provided by DNSSEC and the Signature
Validation. As TAs need to be managed over time, the trust also concerns
the management procedure of the TA. This is the main concern of this
document.

Data's authenticity and integrity is tied to the operator of the key
that generates the signature.  It is conceivable that a validator could
"know" the keys of each data source, but this is not practical at large
scale.  To counter this, DNSSEC relied on securely chaining keys in a
manner isomorphic to the way names are delegated.  Keys for a name will
"vouch for" keys at a name delegated via the signing of a DS resource
record set.

Using keys to vouch for keys, recursively, works when a managable set of
key to name associations are determed to be "trusted" - and are called
trust anchors.  In DNSSEC, a validator needs one or more Trust Anchors
from which to grow chains of verified keys.

With operational experience, a twist has emerged.  More often, to date,
failed validation is due to operator error and not an attempt to forge
data.  As a temporary solution to operational errors, the concept of
Negative Trust Anchors [RFC7646] has been invented.  A negative trust
anchor instructs a validator to ignore the presence of keys for a name,
reacting as if the name is unsigned.

Both Trust Anchors and Negative Trust Anchors are managed via a Trust
Anchor Store.

Once accurately validated the RRset is assumed to be accurately
validated and trusted during the time indicated by its TTL. 

A threat associated to the Signature Validation could consist in a RRSet
maliciously forged to be validated by a trusted DNSKEY RR. Such threat
mostly relies on the use of weak cryptography by the authoritative
server, and the DNSSEC validator has little means to prevent such
threats. 

The document considers instead the threats associated to the
establishment of the trust where a DNSKEY RR is maliciously established.
This may be through a weakness in the authentication of changes to the
zone administration database, allowing a malicious key to be added and
then signed according to the DNSSEC process. Once this is discovered to
have happened, other data validated via such a key should be called into
question.  

This document is focused on operational recommendations that DNSSEC
validators operators SHOULD put in place in order to implement
sufficient trust that makes DNSSEC validation output accurate. The
recommendations described in this document include, provisioning
mechanisms as well as monitoring and management mechanisms. 

The mechanisms provided are designed in accordance of the DNSSEC trust
model as to meet the current operations of DNSSEC. Such trust model is
briefly recapped in {{sec-dnssec-val-desc}} so operators understand the
limits and motivations for such mechanisms.

# Terminology

This document uses the following terminology:

DNSSEC validator
: the entity that performs DNSSEC resolution and performs signature
validation.

Accurate validation
: validation that avoids false positives and catches true negatives. 

Trust Anchor Data Store
: a module (of code) implementing functions related to the trust anchors
used by the validator.  This is essentially a database allowing access,
monitoring of, and changes to trust anchors.

DNSSEC Resolver Operator (DRO)
: The operator providing DNSSEC validation service and managing DNSSEC
validators


#  DNSSEC Validator Description {#sec-dnssec-val-desc}

This is a conceptual block diagram of the elements involved with
DNSSEC validation. This is not meant to be an architecture for code,
this is meant to be a framework for discussion and explanation.


    +-------------+  +---------------+
    |             |  |               |
    | Time Source |  | Cryptographic |
    |             |  |   Libraries   |
    |             |  |               |
    +-------------+  +---------------+
           |                 |
           v                 v
    +--------------------------------+   +--------------+
    |                                |   |              |
    |                                |<--| Trust Anchor |
    |    DNSSEC Validation Engine    |   |   Manager &  |
    |                                |-->|   Storage    |
    |                                |   |              |
    +--------------------------------+   +--------------+
          ^ |               ^                   |
          | v               |                   |
    +-------------+  +---------------+          |
    |             |  |               |          |
    | DNS Caches  |  | DNS Messages  |<---------+
    |             |  |               |
    +-------------+  +---------------+
   
         Figure 1: DNSSEC Validator Description


Time Source 
: The wall clock time provides the DNSSEC Validation Engine the current
time. Time is among other used to validate the RRSIG Signature and
Inception Fields to provide some protection against replay attacks.

Cryptograhic Libraries
: The code performing mathematical functions provides the DNSSEC
Validation Engine the ability to check the Signature Field that contains
the cryptographic signature covering the RRSIG RDATA.  

DNS Message 
: DNS responses are used to carry the information from the DNS system.
The receiver of the DNS message can be any kind of application including
DNS-related application such as in the case of automated Trust Anchor
update performed by the Trust Anchor Manager & Storage. The DNSSEC
Validator Engine accurately validates the DNS responses before caching
them in the DNS Cache and forwarding them to the DNS receiver. In case
of validation failure, an error is returned and the information may be
negatively cached.


DNS Caches
: Include positive and negative caches. The DNSSEC Validation Engine fills
DNS Caches with the results of a validation (positive data, negative
failures). The DNSSEC trust model considers that once a RRset has been
accurately validated by the DNSSEC Validator Engine, the RRset is
considered trusted (or untrusted) for its associated TTL. DNS Caches
contain RRsets that may contain information requested by the
application (RRset of type AAAA for example) as well as RRset necessary
to accurately validate the RRsets (RRsets of type DNSKET or RRSIG for
example). It also worth noticing that RRset validated with DNSSEC or
RRset that are not validated with DNSSEC fill the DNS Cache with the
same level of trust.  

Trust Anchor Manager 
: The database of trust anchors associated to database management
processes. This function provides the DNSSEC Validation Engine Trust
Anchor information when needed. When TA needs to be updated, the Trust
Anchor Manager is also responsible to handle the updating procedure.
This includes sending DNS Messages as well as treating appropriately the
DNS responses that have been accurately validated by the DNSSEC
Validator Engine.  This will require the DNSSEC Validator to update
Trust Anchor information, whether via methods like Automated Updates of
DNSSEC Trust Anchors (RFC 5011), management of Negative Trust Anchors,
or other, possibly not yet defined, means.

DNSSEC Validation Engine
: follows local policy to approve data. The approved data is returned to
the requesting application as well as in the DNS Caches. While the
cryptographic computation of the RRSIG signature may be the most visible
step, the RRSIG record also contains other information intended to help
the validator perform its work, in some cases "sane value" checks are
performed.  For instance, the original TTL (needed to prepare the RR set
for validation) ought to be equal to or higher than the received TTL.

Not shown - Name Server Process Management interfaces to elements,
handling of Checking Disabled request, responses, as well as all API
requests made of the name server.

# Operating DNSSEC validators

DNSSEC operators needs to be able to enable DNSSEC validation with
sufficient confidence they will not be held responsible in case their
resolver does not validate the DNSSEC response. The minimization of
these risks is provided by setting automated procedures, that:

Start-up health checks
: performs configuration as well as environment checks at startup, and
does not start resolving upon this information being successfully
validated. The start-up health checks ensure the DNSSEC resolver can
appropriately operate. It is strongly RECOMMENDED that these checks are
highly automated.   


Running health checks
: Configuration of the DNSSEC resolver may evolve as well as the
environment it is operating in. As a result, health checks needs to be
performed regularly while the DNSSEC resolver operates. Some events may
be reported with various level of severity. The DNSSEC operator may
take various action depending on the report as well as its occurrence.
It is RECOMMENDED these checks are automated and performed at regular
intervals. The document also RECOMMENDS actions to be taken by the
DNSSEC resolver operator. In some cases, the action may be automated,
while in other cases, a validation from the DNSSEC MAY be needed.   

On demand operation:
: An operator may be willing to perform on-demand health-checks in order
to monitor closely the behavior of its platform of DNSSEC Resolver.
Individual checks may performed when a specific operation occurs, such
as for example a key roll over occurs, and the operator want to closely
follow the behavior of its platform. Even if the check may be similar to
Running health checks, it is not a minor operation to change the
configuration of the monitoring/reporting of the platform. As a result,
there is a need for an operator to be able to perform on-demand checks.
Additional tests may be needed in order to investigate the root cause of
an error causing the DNSSEC validation to fail. Although the tests MAY
be automated to report a diagnostic to the resolver operator, the
necessary actions taken MAY require a confirmation from the DNSSEC
resolver operator.  

#  Time deviation and absence of Real Time Clock

With M2M communication some devices are not expecting to embed Real Time
Clock (Raspberry Pi is one example of such devices). When these devices
are re-plugged the initial time is set to January 1 1970.  Other devices
that have clocks that may suffer from time deviation. These devices
cannot rely on their time estimation to perform DNSSEC validation.

Time synchronization may be performed manually, but for the sake of
operations it is strongly RECOMMENDED to automate the time
synchronization on each resolver. In addition, it is RECOMMENED the
operator regularly proceed to sanity checks of its resolver and  

Start-up recommendation 
: DNSSEC validator operators MUST provide means to update the time
without relying on DNSSEC when the DNSSEC validator is started. The
DNSSEC validator MUST NOT start if the time synchronization does not
succeed at start time. 

Note that updating time in order to be able to perform DNSSEC
validation may become a form of a chicken-and-egg problem when the NTP
server is designated by its FQDN.  The update mechanisms must consider
the DNSSEC validator may not able to validate the DNSSEC queries.  In
other words, the mechanisms may have to update the time over an unsecure
DNSSEC resolution.

Running recommendation
: While operating, time MUST be regularly synchronized. The DNSSEC not
being able to synchronize its time MUST report an error. Upon a number
of consecutive errors, the Resolver operator is expected to investigate
the further the availability or the connectivity of the NTP server. When
time synchronisation succeeds, the time difference between the local
time and the reference time SHOULD be reported. Upon too large time
derivation, the resolver operator is expected to address this issue. 


On-demand recommendation
: An DNSSEC resolver operator MUST be able to request the time of the
DNSSEC resolver. It is RECOMMENDED to check the time of DNSSEC resolver
for any investigation associated to a signature fail. 

# Trust Anchor Store

A Trust Anchor store will maintain associations between domain names and
keys (whether stored as in a DNSKEY resource record or a DS resource
record) and domain names whose key are to be ignored (negative trust
anchors).  The Trust Anchor store is essentially a simple database,
storing the positive trust anchors and negative trust anchors and
enabling changes to the lists. Management of the trust anchors can be
done manually or in an automated way. 

Management of Trust Anchors can be subdivided into two sub-categories:

* 1) Trust Anchor bootstrapping, that is the ability to check the
validity of Trust Anchor the when the DNSSEC resolver is started.
* 2) Trust Anchor update, that is the ability for the DNSSEC resolver
operator  to update the Trust Anchors.  The reasons for updating a key
are when a key role over occurs or when a negative trust anchor needs to
be placed.  
* 3) Trust Anchor reporting, that is the ability to the DNSSEC
resolver operator to consult the Trust Anchors  used by the DNSSEC
resolver 

## Trust Anchor Bootstrapping {#bootstraping}

The bootstrapping process enables a DRO to start a DNSSEC resolver from
a configuration file, that reflects the trust model of the DRO.
Typically, the DRO may define one or multiple domains he trusts as entry
point. The bootstrapping aspect includes a mechanism to retrieve the
corresponding value of the Trust Anchor. Doing so in an automated way,
reduces the various versions of the configuration of the DNSSEC
resolvers. In case the DRO provides the Trust Anchor value, such
mechanism could confirm the validity of the Trust Anchor.  

It is highly RECOMMENDED the DNSSEC resolver operator does not blindly
rely on the Trust Anchors provided in a configuration when the resolver
is started, but instead that validity checks are performed regarding the
Trust Anchors being used. 

We do not provide recommendations regarding the number of Trust Anchors
a DNSSEC resolver operator needs to configure its DNSSEC resolver with.
There are many reasons a DNSSEC resolver operator may be willing to
consider multiple Trust Anchors as opposed to a single Root Zone Trust
Anchor. However, it is NOT RECOMMENDED to add TA that do not provide
bootstrapping mechanisms.  

In fact it is not always possible to build a trusted delegation between
the Root Zone and any sub zone.  This may happen for example if one of
the upper zones does not handle the secure delegation or improperly
implement it.  A DS RRset may not be properly filled or its associated
signature cannot be validated.  As the chain of trust between a zone and
the root zone may not be validated, the DNSSEC validation for the zone
requires a Trust Anchor.  Such DNS(SEC) resolutions may be critical for
infrastructure management.  A company "Example" may, for example,
address all its devices under the domain example.com and may not want
disruption to happen if the .com delegation cannot be validated for any
reason.  Such companies may provision there DNSSEC validator with the
Trust Anchor KSK for the zone example.com in addition to the regular
DNSSEC delegation.  Similarly some some domains may present different
views such as a "private" view and a "public view".  These zones may
have some different content, and may use a different KSK for each view.

Although some bootstrapping mechanisms to securely retrieve publish
{{?RFC7958}} and retrieve {{?UNBOUND-ANCHOR}} the Root Zone Trust Anchor
have been defined, it is believed these mechanisms should be extended to
other KSKs or Trust Anchors.   

Start-up recommendation 
: It is RECOMMENDED DNSSEC resolver operators only rely on Trust Anchors
that provide a bootstrapping mechanism. It is NOT RECOMMENDED to add a
Trust Anchor that does not provide such mechanism. 

Start-up recommendation 
: DNS resolver MUST validate the Trust Anchors before starting the
DNSSEC resolver, and a failure of TA validity check MUST prevent the
DNSSEC resolver to be started. Validation of the Trust Anchor includes
coherence between out-out band values, values stored in the DNS as well
as corresponding DS RRsets. 


###  IANA Trust Anchor Bootstrapping

For validators that may be used on the global public Internet (with "may
be" referring to general purpose, general release code), handling the
IANA managed root zone KSK trust anchor is a consideration.

The IANA managed root zone KSK is an operationally significant trust
point in the global public Internet. Attention to the trust anchor for
this point is paramount. Trust anchor management ought to recognize that
the majority of operators deploying DNSSEC validators will need to
explicitly or implicitly rely on this trust anchor. Trust anchor
management needs to recognize that there may be other trust anchors of
interest to operators. Besides deployments in networks other than the
global public Internet (hence a different root), operators may want to
configure other trust points.

The IANA managed root zone KSK is managed and published as described in
"DNSSEC Trust Anchor Publication for the Root Zone" {{?RFC7598}}. That
document is written as specific to that trust point.  Other trust points
may adopt the technique describe (or may use other approaches).

This represents a consideration for implementations.  On one hand,
operators will place special emphasis on how the root zone DNSSEC KSK is
managed.  On the other hand, implementations  ought to accommodate trust
anchors in a general manner, despite the odds that other trust anchors
will not be configured in a specific deployment.

Because of this, it is recommended that implementations make the root
zone trust anchor obvious to the operator while still enabling
configuration of general trust points.


## Trust Anchor Update 

There are two kind of Trust Anchors: Positive Trust Anchors and Negative
Trust Anchors. Updating the Trust Anchors reflects the evolution of the
trust and needs to be operated in a reliable and trusted way. 

A DRO configures its resolver with Trust Anchors associated to specific
domains. The configuration may be updated by adding new domains for
which the corresponding Trust Anchors needs to be retrieved using an
automated bootstrapping procedure. This case is not considered in this
section and is instead addressed in the bootstrapping section
{{bootstrapping}}. 

On the other hand, the value associated to the trust anchor may be
updated over time which is part of the maintenance of the configuration
and needs to be performed by the DNSSEC resolver without any
intervention of the DNSSEC resolver operator. This case is considered in
section {{automated-update-ta}}

A DRO MUST regularly check the trust anchor used by the DNSSEC resolver
is up-to-date. Note that by retrieving in an automated way the value of
the trust anchor, the value is removed from the configuration. This
means that the value of the trust anchor is only handled by the DNSSEC
Resolver. If the value was stored in the configuration file, further
check would have been needed in order to check the write operation had
been successfully performed. In order to check if the Trust Anchors
updates have been successfully performed, the DRO needs to be able to
request the used Trust Anchor used by the resolver and match that value
to the one provided by the bootstrapping mechanism. This is the scope of
section {{automated-ta-check}}. The ability to check the used Trusted
Anchor is also useful to follow-up the procedure when a specific Trust
Anchor is rolled over.  

A DRO MAY regularly report the Trust Anchor used to the authoritative
server. This would at least provide insight to the authoritative server
and provide him some context before moving a key roll over further. This
is the scope of the section {{automated-reporting}}. 

When the DNSSEC Resolver is not able to validate signatures because a
key or DS has been published with an error, the DNSSEC Operator MAY
temporarily disable the signature check for that key the time the error
is addressed. This is performed using Negative Trust Anchor and is the
scope of section {{negative-ta}}. 

### Automated Updates to DNSSEC Trust Anchors {#automated-update-ta}

Trust is inherently a matter of an operations policy. As such, an
operator of a validator will need to be able to update the list of Trust
Anchors.  

Updates of these Trust Anchors are not expected to be handled manually
by the DRO. Instead, there is an existing method for managing positive
trust anchors, documented in "Automated Updates to DNSSEC Trust Anchors"
{{!RFC 5011}} {{I-D.ietf-dnsop-rfc5011-security-considerations}}. This,
and potential updates to it, are recommended to be supported in general
purpose trust anchor stores.

It is NOT RECOMMENDED that Trust Anchor is handled by the DNSSEC
Resolver Operator. This introduces a potentially huge vector for
configuration errors, but due to human intervention as well as potential
misunderstanding of ongoing operations. 

## Automated Trust Anchor Check {#automated-check}

Signaling Trust Anchor Knowledge in DNS Security Extensions (DNSSEC)"
{{!RFC 8145}} provides the ability to query a resolver the DNS KEY used
for the signature check. It is RECOMMENDED a DRO enables this channel to
communicate the Trust Anchors used as opposed as opening a management
interface to the resolver.  

Checking a Trust Anchor includes validating DNSKEY RRsets and associated
DS RRsets in the Resolver, on the DNS system as well as those obtained
out-of-band. The check MUST includes some checks to evaluate if the
mismatch result from an ongoing normal roll over, a potential
emergency key roll over, failed roll over or any other envisioned
cases. 

Running recommendation
:It is RECOMMENDED the DNSSEC Resolver validator regularly checks the
Trust Anchors used by the resolvers are coherent with those provided by
the bootstrapping mechanisms.  This coherence also includes coherence
with the associated DS RRset when possible. A Trust Anchor mismatch MUST
raise an alert. Conflicts are not inherently a problem as some keys may
be withheld from distribution via the DNS.    


Note that checking the Trust Anchor used by a resolver may be performed
using a management interface. This is not the RECOMMENDED way as it may
open the resolver to other vulnerabilities and provides privileged
access to a potential attacker. 

Note also that {{!RFC8145}} does not only concerns Trust Anchor but is
instead generic to DNSKEY RRsets. As a result, unless for the root zone,
it is not possible to determine if the KSK/ZSK or DS is a Trust Anchor or a
KSK/ZSK obtained from regular DNSSEC resolutions. 

If the mismatch is due to a failed key roll-over, this SHOULD be
considered as a bug by the DRO. The Resolver MUST
be be restarted with updated Trust Anchor values.  


On-demand recommendation
: A DRO MUST be able to check the status of a Trust Anchor, that is its
associated value. 

## Automated Reporting of Trust Anchors {#automated-reporting}

The purpose of reporting the currently used Trust Anchor for a domain
name is to establish an informational channel between the resolver and
the authoritative server. This data may not directly be useful for the
DNSSEC Resolver, but instead to the authoritative server. In return it
is likely the authoritative server will take the appropriated steps in
operating the authoritative server and consider this information. As a
result, 

Running Recommendation
: it is RECOMMENDED a DRO enables reporting to the authoritative server
as specified in "Signaling Trust Anchor Knowledge in DNS Security
Extensions (DNSSEC)" {{!RFC 8145}}  


## Negative Trust Anchors {#nta}

A DRO SHOULD be able to disable the validation from a Trust Anchor or a
KSK/ZSK. This could be performed by a Negative Trust Anchor and the
introduction of a Negative Trust Anchor consists in the only
intervention related to Trust Anchors a DRO SHOULD be able to performed
on a resolver. 

"Definition and Use of DNSSEC Negative Trust Anchors" (RFC 7646) defines
the ways Negative Trust Anchors are managed and SHOULD be followed by
DROs. 

Note that adding a Negative Trust Anchor only requires the domain name
to be specified.

A failure in signaling validation is associated to a mismatch between
the key and the signature. For Trust Anchor as opposed as regular
KSK/ZSK, the Trust Anchor is assumed to provided via other channel as
well as though the DNS channel, and there is a high level of trust in
the value used by the resolver for both the DS and DNSKEY RRsets. As a
result, a Trust Anchor that is not able to validate appropriately the
signatures is either an attack or a failure into the signing operation
on the authoritative servers. In the case of Trust Anchor, there is
likely a specific relation between the DNSSEC Resolevr Operator and the
corresponding Authoritative server. The DRO is expected to confirm this
off line before introducing the Negative Trust Anchor. This is likely to
happen via a human confirmation. As a result here are the following
recommendations:

Running recommendation
: DRO SHOULD monitor the number of signature failure associated to each
Trust Anchor. These number are only hints and MUST NOT trigger automated
insertion of NTA. 

Upon a high rate of failure, the DNSSEC Resolve operator is expected to
confirm the value of the Trust Anchor used by the resolver is correct
and up-to-date. (see section {{automated-check}} with on demand check).
Failed key roll over are not expected to happen a that point.  This
could result in an emergency key roll over. It is RECOMMENDED the DNSSEC
Resolver operator get a confirmation. The DRO could either flush the
data in the cache associated to the TA or add a NTA.  This could result
in a bad signing operation of the zone in which case the DRO SHOULD
provide a NTA.   

Note that issues associated to the DS RRSets of a TA MUST NOT generate
any action from the DRO. 

## Interactions with the cached RRsets

The purpose of automated checks is to enable early detection of failed
operations, which provides enough time to the DRO to react without any
consequences. On the other hand, these checks MAY reveal as well that a
rogue trust anchor has been placed and that the resolver is corrupted.
In such cases the DRO MUST put the resolver off line for further
investigation and re-start another instance of resolver and the Resets
under the rogue Trust Anchor in the cache MUST be removed. 

On-demand recommendation
: the DRO MUST be able to flush the cached data associated to a Trust
Anchor. 


#  ZSK / KSK

KSK / ZSK are not part of the DNSSEC validator configuration. Their
values in the DNS Caches may not reflect those published by the
authoritative servers or may be incoherent with the RRset in the DNS
Cache they are validating. However, such incoherence primary results
from error in the management of the authoritative servers. As a result,
it is not expected that the DNSSEC validator provides complex management
facilities to address these issues as this will modify the DNS
architecture and add complexity that is not proved to be beneficial. 

As a result, recommendations are always associated to Running or On demand
recommendations. The main difference between TA and KSK/ZSK is that the
DRO does not necessarily have an out of band mechanism to retrieve the
RRsets. As a result, the DRO has less information to determine and
confirm what is happening. The default recommendation is to let things
go.    

##  KSK/ZSK Data Store

A number of reasons may result in inconsistencies between the RRsets
stored in the cache and those published by the authoritative server.

An emergency KSK / ZSK rollover may result in a new KSK / ZSK with
associated new RRSIG published in the authoritative zone, while DNSSEC
validator may still cache the old value of the ZSK / KSK.  For a RRset
not cached, the DNSSEC validator performs a DNSSEC query to the
authoritative server that returns the RRset signed with the new KSK /
ZSK. The DNSSEC validator may not be able to retrieve the new KSK / ZSK
while being unable to validate the signature with the old KSK / ZSK.
This either result in a bogus resolution or in an invalid signature
check.  Note that by comparing the Key Tag Fields, the DNSSEC validator
is able to notice the new KSK / ZSK used for signing differs from the
one used to generate the received generated signature.  However, the
DNSSEC validator is not expected to retrieve the new ZSK / KSK, as such
behavior could be used by an attacker. Instead, ZSK / KSK key roll over
procedures are expected to avoid such inconsistencies.

Similarly, a KSK / ZSK roll over may be performed normally, that is as
described in {{!RFC6781}} and {{!RFC7583}}. While the KSK / ZSK roll
over is performed, there is no obligation to flush the RRsets in the
cache that have been associated with the old key. In fact, these RRset
may still be considered as trusted and be removed from the cache as
their TTL timeout.  With very long TTL, these RRsets may remain in the
cache while the ZSK / KSK with a shorter TTL is no longer published nor
in the cache. In such situations, the purpose of the KSK / ZSK used to
validate the data is considered trusted at the time it enters the cache,
and such trust may remain after the KSK / ZSK is being rolled over.
Note also that even though the data may not be associated to the KSK /
ZSK that has been used to validate the data, the link between the KSK /
ZSK and the data is still stored in the cache using the RRSIG. Note
also that inconsistencies between the ZSK / KSK stored in the cache and
those published on the authoritative server, may lead to inconsistencies
to downstream DNSSEC validators that rely on multiple cache over time.
Typically, a request for the KSK / ZSK may have been provided by a cache
that is storing the new published value, while the data and associated
signatures may be associated to the old KSK / ZSK.  

Incoherence between RRsets and DNSKEYs may be limited by configuring the
DNSSEC validator with generic rules that applies to the validation
process. Typically, the TTL associate to the DNSKEY is an engagement
from the authoritative server that the DNSKEY will remain valid over
this period. As this engagement supersedes the validation of any RRSIG
and by extension to any RRset in the zone, this TTL value may be used as
the maximum value for the TTL associated to FQDNs in the zone. This
would at least reduce inconsistencies during regular KSK roll over. In
addition, the DNSSEC validator should also be able to provide a maximum
values for TTLs. 

Running recommendation 
: To limit the risks of incoherent data in the cache, it is RECOMMENDED
DRO enforce TTL policies of RRsets based on the TTL of the KSK/ZSK.
RRsets TTL SHOULD NOT exceed the KSK / ZSK initial TTL value. 


Running recommendation
: It is RECOMMENDED a DRO reports the DNSKEY used to the authoritative
server as performed for the TA (see section {{{automated-reporting}}) 

A DRO SHOULD monitor the number of validation failure associated to each
ZSK/KSK and report when a threshold is met. By receiving an alert, the
DRO MUST take an action only upon the confirmation from teh
authoritative server. The main reason for contacting the authoritative
server is that the DRO is not expected to have the history and sufficient
information to differentiate the validation failure form an attack. 


A DRO may collect additional information associated to various KSK/ZSK.
This information may be useful to follow-up roll over when these happen
and evaluate when a key roll over is not performed appropriately on the
resolver side or on the authoritative server. It would provide some
means to the DRO to take action with full knowledge without necessary
asking for a confirmation. In other cases it could prevent invalidation
to happen. These check may be performed for a limited subset of domains
or generalized. The expected check are similar as those detailed for TA
(see section {{automated-check}}).    

# Cryptography Deprecation

As mentioned in {{!RFC8247}} and {{!RFC8221}} cryptography used one day
is expected over the time to be replaced by new and more robust
cryptographic mechanisms. In the case of DNSSEC signature protocols are
likely to be updated over time. In order to anticipate the sunset of one
of the signature scheme, a DNSSEC validator may willing to estimate the
impact of deprecating one signature scheme.

Currently {{!RFC6975}} provides the ability for a DNSSEC validator to
announce an authoritative server the supported signature schemes.
However, a DNSSEC validator is not able to determine other than by
trying whether a signature scheme is supported by the authoritative
server.

To safely deprecate one signature scheme, the DNSSEC validator operator
is expected to follow the recommendation below:

Recommendation 18
: A DNSSEC validator operator SHOULD regularly request and monitor the
signature scheme supported by an authoritative server.

#  Reporting

A DNSSEC validator receiving a DNS response cannot make the difference
between receiving an non-secure response versus an attack. Dropping
DNSSEC fields by a misconfigured middle boxes, such as DS, RRRSIG is
considered as an attack. A DNSSEC validator is expected to perform
secure DNS resolution and as such protect its stub client. An invalid
response may be the result of an attack or a misconfiguration, and the
DNSSEC validator may play an important role in sharing this information.

Recommendation 19
: DNSSEC validation operator SHOULD monitor and report the
unavailability of the DNSSEC service.

Recommendation 20
: DNSSEC validator operator SHOULD monitor and report an invalid DNSSEC
validation.

#  IANA Considerations

There are no IANA consideration for this document.

#  Security Considerations

The recommendations listed in this document have two goals. First
ensuring the DNSSEC validator has appropriated information to
appropriately perform DNSSEC validation. Second, monitoring the
necessary elements that would enable a DNSSEC validator operator to ease
a potential analysis.  The recommendations provide very limited ability
for a DNSSEC validator operator to alter or directly interfere on the
validation process and the main purpose in providing the recommendations
was to let the protocol run as much as possible. Providing inappropriate
information can lead to misconfiguring the DNSSEC validator, and thus
disrupting the DNSSEC resolution service.  As a result, enabling the
setting of configuration parameters by a third party may open a wide
surface of attacks. In addition, such changes may lead to unexpected
corner cases that would result in making analysis and trouble shooting
very hard.  

As an appropriate time value is necessary to perform signature check, an
attacker may provide rogue time value to prevent the DNSSEC validator to
check signatures.

An attacker may also affect the resolution service by regularly asking
the DNSSEC validator to flush the KSK/ZSK from its cache.  All
associated data will also be flushed. This generates additional DNSSEC
resolution and additional validations, as RRSet that were cached require
a DNSSEC resolution over the Internet. This affects the resolution
service by slowing down responses, and increases the load on the DNSSEC
validator.

An attacker may ask the DNSSEC validator to consider a rogue KSK/ZSK,
thus hijacking the DNS zone. Similarly, an attacker may inform the
DNSSEC validator not to trust a given KSK in order to prevent DNSSEC
validation to be performed.

An attacker (cf.  Section 7) can advertise a "known insecure" KSK or ZSK
is "back to secure" to prevent signature check to be performed
correctly.

As a result, information considered by the DNSSEC validator should be
from a trusted party.  This trust party should have been authenticated,
and the channel used to exchange the information should also be
protected and authenticated.

# Acknowledgment

The need to address DNSSEC issues on the resolver side started in the
Home Networks mailing list and during the IETF87 in Berlin.  Among
others, people involved in the discussion were Ted Lemon, Ralph Weber,
Normen Kowalewski, and Mikael Abrahamsson.  People involved in the email
discussion initiated by Jim Gettys were, with among others, Paul
Wouters, Joe Abley and Michael Richardson.

The current document has been initiated after a discussion with Paul
Wouter and Evan Hunt.


